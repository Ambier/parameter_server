# configuration to run l1-regularized logistic regression on the ctr dataset
type: RISK_MINIMIZATION
app_name: "CTR"
parameter_name: "CTR_w"
training_data {
format: PROTO
file: "../data/ctrb/train/part-000[0-1].*"
# file: "../data/ctrb/train/part-.*"
}
validation_data {
format: PROTO
# file: "../data/ctrb/test/part-000[0-1].*"
file: "../data/ctrb/test/part-.*"
}

# each worker dumps its processed data into local disk (or hdfs). It will
# accelerate the data loading time if runing again. But remember to delete all
# caches if (1) # of workers is changed; (2) data are changed.
local_cache {
format: BIN
file: "../cache/ctrb"
}

model_output {
format: TEXT
}
loss {
type: LOGIT
}
# lambda * \| w \|_1
penalty {
type: L1
lambda: 5
}
learning_rate {
type: CONSTANT
eta: 1
}
block_solver {
# turn it off only for debug use
random_feature_block_order : true
# block-coordinate updating. We divide a feature group into feature_block_ratio
# x nnz_feature_per_instance blocks. If = 0, then use all features
feature_block_ratio : 4
# max # of iterations
max_pass_of_data : 20
# bounded-delay consistency
max_block_delay : 8
# convergance critiria. stop if the relative objective <= epsilon
epsilon : 2e-5
}
bcd_l1lr {
# trust region search
delta_init_value : 1
delta_max_value : 5
# increasing this number will reduce the effect of kkt filter. A very large
# number, such as 1e20 will turn off the kkt filter
kkt_filter_threshold_ratio : 10
}
