// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/penalty.proto

#ifndef PROTOBUF_proto_2fpenalty_2eproto__INCLUDED
#define PROTOBUF_proto_2fpenalty_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fpenalty_2eproto();
void protobuf_AssignDesc_proto_2fpenalty_2eproto();
void protobuf_ShutdownFile_proto_2fpenalty_2eproto();

class PenaltyConfig;

enum PenaltyConfig_Type {
  PenaltyConfig_Type_L1 = 1,
  PenaltyConfig_Type_L2 = 2
};
bool PenaltyConfig_Type_IsValid(int value);
const PenaltyConfig_Type PenaltyConfig_Type_Type_MIN = PenaltyConfig_Type_L1;
const PenaltyConfig_Type PenaltyConfig_Type_Type_MAX = PenaltyConfig_Type_L2;
const int PenaltyConfig_Type_Type_ARRAYSIZE = PenaltyConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor();
inline const ::std::string& PenaltyConfig_Type_Name(PenaltyConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PenaltyConfig_Type_descriptor(), value);
}
inline bool PenaltyConfig_Type_Parse(
    const ::std::string& name, PenaltyConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PenaltyConfig_Type>(
    PenaltyConfig_Type_descriptor(), name, value);
}
// ===================================================================

class PenaltyConfig : public ::google::protobuf::Message {
 public:
  PenaltyConfig();
  virtual ~PenaltyConfig();

  PenaltyConfig(const PenaltyConfig& from);

  inline PenaltyConfig& operator=(const PenaltyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PenaltyConfig& default_instance();

  void Swap(PenaltyConfig* other);

  // implements Message ----------------------------------------------

  PenaltyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PenaltyConfig& from);
  void MergeFrom(const PenaltyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PenaltyConfig_Type Type;
  static const Type L1 = PenaltyConfig_Type_L1;
  static const Type L2 = PenaltyConfig_Type_L2;
  static inline bool Type_IsValid(int value) {
    return PenaltyConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PenaltyConfig_Type_Type_MIN;
  static const Type Type_MAX =
    PenaltyConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PenaltyConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PenaltyConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PenaltyConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PenaltyConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PenaltyConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PenaltyConfig_Type type() const;
  inline void set_type(::PenaltyConfig_Type value);

  // required float coefficient = 2 [default = 0];
  inline bool has_coefficient() const;
  inline void clear_coefficient();
  static const int kCoefficientFieldNumber = 2;
  inline float coefficient() const;
  inline void set_coefficient(float value);

  // @@protoc_insertion_point(class_scope:PenaltyConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_coefficient();
  inline void clear_has_coefficient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  float coefficient_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fpenalty_2eproto();
  friend void protobuf_AssignDesc_proto_2fpenalty_2eproto();
  friend void protobuf_ShutdownFile_proto_2fpenalty_2eproto();

  void InitAsDefaultInstance();
  static PenaltyConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// PenaltyConfig

// required .PenaltyConfig.Type type = 1;
inline bool PenaltyConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PenaltyConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PenaltyConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PenaltyConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PenaltyConfig_Type PenaltyConfig::type() const {
  return static_cast< ::PenaltyConfig_Type >(type_);
}
inline void PenaltyConfig::set_type(::PenaltyConfig_Type value) {
  assert(::PenaltyConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required float coefficient = 2 [default = 0];
inline bool PenaltyConfig::has_coefficient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PenaltyConfig::set_has_coefficient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PenaltyConfig::clear_has_coefficient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PenaltyConfig::clear_coefficient() {
  coefficient_ = 0;
  clear_has_coefficient();
}
inline float PenaltyConfig::coefficient() const {
  return coefficient_;
}
inline void PenaltyConfig::set_coefficient(float value) {
  set_has_coefficient();
  coefficient_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PenaltyConfig_Type>() {
  return ::PenaltyConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fpenalty_2eproto__INCLUDED
