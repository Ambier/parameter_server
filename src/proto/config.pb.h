// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/config.proto

#ifndef PROTOBUF_proto_2fconfig_2eproto__INCLUDED
#define PROTOBUF_proto_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/range.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fconfig_2eproto();
void protobuf_AssignDesc_proto_2fconfig_2eproto();
void protobuf_ShutdownFile_proto_2fconfig_2eproto();

class AppConfig;
class DataConfig;
class BlockIteratorConfig;
class LossConfig;
class LearnerConfig;
class AggGradLearnerArg;
class PenaltyConfig;

enum AppConfig_AppType {
  AppConfig_AppType_RISK_MINIMIZATION = 1,
  AppConfig_AppType_SKETCH = 2
};
bool AppConfig_AppType_IsValid(int value);
const AppConfig_AppType AppConfig_AppType_AppType_MIN = AppConfig_AppType_RISK_MINIMIZATION;
const AppConfig_AppType AppConfig_AppType_AppType_MAX = AppConfig_AppType_SKETCH;
const int AppConfig_AppType_AppType_ARRAYSIZE = AppConfig_AppType_AppType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AppConfig_AppType_descriptor();
inline const ::std::string& AppConfig_AppType_Name(AppConfig_AppType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AppConfig_AppType_descriptor(), value);
}
inline bool AppConfig_AppType_Parse(
    const ::std::string& name, AppConfig_AppType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppConfig_AppType>(
    AppConfig_AppType_descriptor(), name, value);
}
enum DataConfig_DataFormat {
  DataConfig_DataFormat_BIN = 1,
  DataConfig_DataFormat_PROTO = 2
};
bool DataConfig_DataFormat_IsValid(int value);
const DataConfig_DataFormat DataConfig_DataFormat_DataFormat_MIN = DataConfig_DataFormat_BIN;
const DataConfig_DataFormat DataConfig_DataFormat_DataFormat_MAX = DataConfig_DataFormat_PROTO;
const int DataConfig_DataFormat_DataFormat_ARRAYSIZE = DataConfig_DataFormat_DataFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataConfig_DataFormat_descriptor();
inline const ::std::string& DataConfig_DataFormat_Name(DataConfig_DataFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataConfig_DataFormat_descriptor(), value);
}
inline bool DataConfig_DataFormat_Parse(
    const ::std::string& name, DataConfig_DataFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataConfig_DataFormat>(
    DataConfig_DataFormat_descriptor(), name, value);
}
enum LossConfig_Type {
  LossConfig_Type_SQUARE = 1,
  LossConfig_Type_LOGIT = 2,
  LossConfig_Type_HINGE = 3
};
bool LossConfig_Type_IsValid(int value);
const LossConfig_Type LossConfig_Type_Type_MIN = LossConfig_Type_SQUARE;
const LossConfig_Type LossConfig_Type_Type_MAX = LossConfig_Type_HINGE;
const int LossConfig_Type_Type_ARRAYSIZE = LossConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LossConfig_Type_descriptor();
inline const ::std::string& LossConfig_Type_Name(LossConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LossConfig_Type_descriptor(), value);
}
inline bool LossConfig_Type_Parse(
    const ::std::string& name, LossConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LossConfig_Type>(
    LossConfig_Type_descriptor(), name, value);
}
enum LearnerConfig_Type {
  LearnerConfig_Type_GRADIENT_DESCENT = 1,
  LearnerConfig_Type_PROXIMAL_GRADIENT = 2,
  LearnerConfig_Type_LBFGS = 3
};
bool LearnerConfig_Type_IsValid(int value);
const LearnerConfig_Type LearnerConfig_Type_Type_MIN = LearnerConfig_Type_GRADIENT_DESCENT;
const LearnerConfig_Type LearnerConfig_Type_Type_MAX = LearnerConfig_Type_LBFGS;
const int LearnerConfig_Type_Type_ARRAYSIZE = LearnerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LearnerConfig_Type_descriptor();
inline const ::std::string& LearnerConfig_Type_Name(LearnerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LearnerConfig_Type_descriptor(), value);
}
inline bool LearnerConfig_Type_Parse(
    const ::std::string& name, LearnerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LearnerConfig_Type>(
    LearnerConfig_Type_descriptor(), name, value);
}
enum PenaltyConfig_Type {
  PenaltyConfig_Type_L1 = 1,
  PenaltyConfig_Type_L2 = 2
};
bool PenaltyConfig_Type_IsValid(int value);
const PenaltyConfig_Type PenaltyConfig_Type_Type_MIN = PenaltyConfig_Type_L1;
const PenaltyConfig_Type PenaltyConfig_Type_Type_MAX = PenaltyConfig_Type_L2;
const int PenaltyConfig_Type_Type_ARRAYSIZE = PenaltyConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* PenaltyConfig_Type_descriptor();
inline const ::std::string& PenaltyConfig_Type_Name(PenaltyConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    PenaltyConfig_Type_descriptor(), value);
}
inline bool PenaltyConfig_Type_Parse(
    const ::std::string& name, PenaltyConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PenaltyConfig_Type>(
    PenaltyConfig_Type_descriptor(), name, value);
}
// ===================================================================

class AppConfig : public ::google::protobuf::Message {
 public:
  AppConfig();
  virtual ~AppConfig();

  AppConfig(const AppConfig& from);

  inline AppConfig& operator=(const AppConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AppConfig& default_instance();

  void Swap(AppConfig* other);

  // implements Message ----------------------------------------------

  AppConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppConfig& from);
  void MergeFrom(const AppConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AppConfig_AppType AppType;
  static const AppType RISK_MINIMIZATION = AppConfig_AppType_RISK_MINIMIZATION;
  static const AppType SKETCH = AppConfig_AppType_SKETCH;
  static inline bool AppType_IsValid(int value) {
    return AppConfig_AppType_IsValid(value);
  }
  static const AppType AppType_MIN =
    AppConfig_AppType_AppType_MIN;
  static const AppType AppType_MAX =
    AppConfig_AppType_AppType_MAX;
  static const int AppType_ARRAYSIZE =
    AppConfig_AppType_AppType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AppType_descriptor() {
    return AppConfig_AppType_descriptor();
  }
  static inline const ::std::string& AppType_Name(AppType value) {
    return AppConfig_AppType_Name(value);
  }
  static inline bool AppType_Parse(const ::std::string& name,
      AppType* value) {
    return AppConfig_AppType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .AppConfig.AppType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::AppConfig_AppType type() const;
  inline void set_type(::AppConfig_AppType value);

  // optional string app_name = 2;
  inline bool has_app_name() const;
  inline void clear_app_name();
  static const int kAppNameFieldNumber = 2;
  inline const ::std::string& app_name() const;
  inline void set_app_name(const ::std::string& value);
  inline void set_app_name(const char* value);
  inline void set_app_name(const char* value, size_t size);
  inline ::std::string* mutable_app_name();
  inline ::std::string* release_app_name();
  inline void set_allocated_app_name(::std::string* app_name);

  // repeated string parameter_name = 3;
  inline int parameter_name_size() const;
  inline void clear_parameter_name();
  static const int kParameterNameFieldNumber = 3;
  inline const ::std::string& parameter_name(int index) const;
  inline ::std::string* mutable_parameter_name(int index);
  inline void set_parameter_name(int index, const ::std::string& value);
  inline void set_parameter_name(int index, const char* value);
  inline void set_parameter_name(int index, const char* value, size_t size);
  inline ::std::string* add_parameter_name();
  inline void add_parameter_name(const ::std::string& value);
  inline void add_parameter_name(const char* value);
  inline void add_parameter_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& parameter_name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameter_name();

  // optional .DataConfig training = 10;
  inline bool has_training() const;
  inline void clear_training();
  static const int kTrainingFieldNumber = 10;
  inline const ::DataConfig& training() const;
  inline ::DataConfig* mutable_training();
  inline ::DataConfig* release_training();
  inline void set_allocated_training(::DataConfig* training);

  // optional .LossConfig loss = 20;
  inline bool has_loss() const;
  inline void clear_loss();
  static const int kLossFieldNumber = 20;
  inline const ::LossConfig& loss() const;
  inline ::LossConfig* mutable_loss();
  inline ::LossConfig* release_loss();
  inline void set_allocated_loss(::LossConfig* loss);

  // optional .PenaltyConfig penalty = 21;
  inline bool has_penalty() const;
  inline void clear_penalty();
  static const int kPenaltyFieldNumber = 21;
  inline const ::PenaltyConfig& penalty() const;
  inline ::PenaltyConfig* mutable_penalty();
  inline ::PenaltyConfig* release_penalty();
  inline void set_allocated_penalty(::PenaltyConfig* penalty);

  // optional .LearnerConfig learner = 30;
  inline bool has_learner() const;
  inline void clear_learner();
  static const int kLearnerFieldNumber = 30;
  inline const ::LearnerConfig& learner() const;
  inline ::LearnerConfig* mutable_learner();
  inline ::LearnerConfig* release_learner();
  inline void set_allocated_learner(::LearnerConfig* learner);

  // optional .BlockIteratorConfig block_iterator = 40;
  inline bool has_block_iterator() const;
  inline void clear_block_iterator();
  static const int kBlockIteratorFieldNumber = 40;
  inline const ::BlockIteratorConfig& block_iterator() const;
  inline ::BlockIteratorConfig* mutable_block_iterator();
  inline ::BlockIteratorConfig* release_block_iterator();
  inline void set_allocated_block_iterator(::BlockIteratorConfig* block_iterator);

  // @@protoc_insertion_point(class_scope:AppConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_app_name();
  inline void clear_has_app_name();
  inline void set_has_training();
  inline void clear_has_training();
  inline void set_has_loss();
  inline void clear_has_loss();
  inline void set_has_penalty();
  inline void clear_has_penalty();
  inline void set_has_learner();
  inline void clear_has_learner();
  inline void set_has_block_iterator();
  inline void clear_has_block_iterator();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* app_name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameter_name_;
  ::DataConfig* training_;
  ::LossConfig* loss_;
  ::PenaltyConfig* penalty_;
  ::LearnerConfig* learner_;
  ::BlockIteratorConfig* block_iterator_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static AppConfig* default_instance_;
};
// -------------------------------------------------------------------

class DataConfig : public ::google::protobuf::Message {
 public:
  DataConfig();
  virtual ~DataConfig();

  DataConfig(const DataConfig& from);

  inline DataConfig& operator=(const DataConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataConfig& default_instance();

  void Swap(DataConfig* other);

  // implements Message ----------------------------------------------

  DataConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DataConfig& from);
  void MergeFrom(const DataConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef DataConfig_DataFormat DataFormat;
  static const DataFormat BIN = DataConfig_DataFormat_BIN;
  static const DataFormat PROTO = DataConfig_DataFormat_PROTO;
  static inline bool DataFormat_IsValid(int value) {
    return DataConfig_DataFormat_IsValid(value);
  }
  static const DataFormat DataFormat_MIN =
    DataConfig_DataFormat_DataFormat_MIN;
  static const DataFormat DataFormat_MAX =
    DataConfig_DataFormat_DataFormat_MAX;
  static const int DataFormat_ARRAYSIZE =
    DataConfig_DataFormat_DataFormat_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataFormat_descriptor() {
    return DataConfig_DataFormat_descriptor();
  }
  static inline const ::std::string& DataFormat_Name(DataFormat value) {
    return DataConfig_DataFormat_Name(value);
  }
  static inline bool DataFormat_Parse(const ::std::string& name,
      DataFormat* value) {
    return DataConfig_DataFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .DataConfig.DataFormat format = 1;
  inline bool has_format() const;
  inline void clear_format();
  static const int kFormatFieldNumber = 1;
  inline ::DataConfig_DataFormat format() const;
  inline void set_format(::DataConfig_DataFormat value);

  // repeated string files = 2;
  inline int files_size() const;
  inline void clear_files();
  static const int kFilesFieldNumber = 2;
  inline const ::std::string& files(int index) const;
  inline ::std::string* mutable_files(int index);
  inline void set_files(int index, const ::std::string& value);
  inline void set_files(int index, const char* value);
  inline void set_files(int index, const char* value, size_t size);
  inline ::std::string* add_files();
  inline void add_files(const ::std::string& value);
  inline void add_files(const char* value);
  inline void add_files(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& files() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_files();

  // optional .PbRange range = 3;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 3;
  inline const ::PbRange& range() const;
  inline ::PbRange* mutable_range();
  inline ::PbRange* release_range();
  inline void set_allocated_range(::PbRange* range);

  // @@protoc_insertion_point(class_scope:DataConfig)
 private:
  inline void set_has_format();
  inline void clear_has_format();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> files_;
  ::PbRange* range_;
  int format_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static DataConfig* default_instance_;
};
// -------------------------------------------------------------------

class BlockIteratorConfig : public ::google::protobuf::Message {
 public:
  BlockIteratorConfig();
  virtual ~BlockIteratorConfig();

  BlockIteratorConfig(const BlockIteratorConfig& from);

  inline BlockIteratorConfig& operator=(const BlockIteratorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockIteratorConfig& default_instance();

  void Swap(BlockIteratorConfig* other);

  // implements Message ----------------------------------------------

  BlockIteratorConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockIteratorConfig& from);
  void MergeFrom(const BlockIteratorConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 example_block_size = 1 [default = -1];
  inline bool has_example_block_size() const;
  inline void clear_example_block_size();
  static const int kExampleBlockSizeFieldNumber = 1;
  inline ::google::protobuf::int64 example_block_size() const;
  inline void set_example_block_size(::google::protobuf::int64 value);

  // required float feature_block_ratio = 2 [default = 0];
  inline bool has_feature_block_ratio() const;
  inline void clear_feature_block_ratio();
  static const int kFeatureBlockRatioFieldNumber = 2;
  inline float feature_block_ratio() const;
  inline void set_feature_block_ratio(float value);

  // required int32 max_pass_of_data = 3 [default = 2];
  inline bool has_max_pass_of_data() const;
  inline void clear_max_pass_of_data();
  static const int kMaxPassOfDataFieldNumber = 3;
  inline ::google::protobuf::int32 max_pass_of_data() const;
  inline void set_max_pass_of_data(::google::protobuf::int32 value);

  // required int32 max_block_delay = 4 [default = 0];
  inline bool has_max_block_delay() const;
  inline void clear_max_block_delay();
  static const int kMaxBlockDelayFieldNumber = 4;
  inline ::google::protobuf::int32 max_block_delay() const;
  inline void set_max_block_delay(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:BlockIteratorConfig)
 private:
  inline void set_has_example_block_size();
  inline void clear_has_example_block_size();
  inline void set_has_feature_block_ratio();
  inline void clear_has_feature_block_ratio();
  inline void set_has_max_pass_of_data();
  inline void clear_has_max_pass_of_data();
  inline void set_has_max_block_delay();
  inline void clear_has_max_block_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 example_block_size_;
  float feature_block_ratio_;
  ::google::protobuf::int32 max_pass_of_data_;
  ::google::protobuf::int32 max_block_delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static BlockIteratorConfig* default_instance_;
};
// -------------------------------------------------------------------

class LossConfig : public ::google::protobuf::Message {
 public:
  LossConfig();
  virtual ~LossConfig();

  LossConfig(const LossConfig& from);

  inline LossConfig& operator=(const LossConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LossConfig& default_instance();

  void Swap(LossConfig* other);

  // implements Message ----------------------------------------------

  LossConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LossConfig& from);
  void MergeFrom(const LossConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LossConfig_Type Type;
  static const Type SQUARE = LossConfig_Type_SQUARE;
  static const Type LOGIT = LossConfig_Type_LOGIT;
  static const Type HINGE = LossConfig_Type_HINGE;
  static inline bool Type_IsValid(int value) {
    return LossConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LossConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LossConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LossConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LossConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LossConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LossConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .LossConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::LossConfig_Type type() const;
  inline void set_type(::LossConfig_Type value);

  // @@protoc_insertion_point(class_scope:LossConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static LossConfig* default_instance_;
};
// -------------------------------------------------------------------

class LearnerConfig : public ::google::protobuf::Message {
 public:
  LearnerConfig();
  virtual ~LearnerConfig();

  LearnerConfig(const LearnerConfig& from);

  inline LearnerConfig& operator=(const LearnerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LearnerConfig& default_instance();

  void Swap(LearnerConfig* other);

  // implements Message ----------------------------------------------

  LearnerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LearnerConfig& from);
  void MergeFrom(const LearnerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LearnerConfig_Type Type;
  static const Type GRADIENT_DESCENT = LearnerConfig_Type_GRADIENT_DESCENT;
  static const Type PROXIMAL_GRADIENT = LearnerConfig_Type_PROXIMAL_GRADIENT;
  static const Type LBFGS = LearnerConfig_Type_LBFGS;
  static inline bool Type_IsValid(int value) {
    return LearnerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LearnerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LearnerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LearnerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LearnerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LearnerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LearnerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .LearnerConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::LearnerConfig_Type type() const;
  inline void set_type(::LearnerConfig_Type value);

  // optional float learning_rate = 2 [default = 1];
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 2;
  inline float learning_rate() const;
  inline void set_learning_rate(float value);

  // @@protoc_insertion_point(class_scope:LearnerConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  float learning_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static LearnerConfig* default_instance_;
};
// -------------------------------------------------------------------

class AggGradLearnerArg : public ::google::protobuf::Message {
 public:
  AggGradLearnerArg();
  virtual ~AggGradLearnerArg();

  AggGradLearnerArg(const AggGradLearnerArg& from);

  inline AggGradLearnerArg& operator=(const AggGradLearnerArg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AggGradLearnerArg& default_instance();

  void Swap(AggGradLearnerArg* other);

  // implements Message ----------------------------------------------

  AggGradLearnerArg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AggGradLearnerArg& from);
  void MergeFrom(const AggGradLearnerArg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float learning_rate = 1 [default = 1];
  inline bool has_learning_rate() const;
  inline void clear_learning_rate();
  static const int kLearningRateFieldNumber = 1;
  inline float learning_rate() const;
  inline void set_learning_rate(float value);

  // @@protoc_insertion_point(class_scope:AggGradLearnerArg)
 private:
  inline void set_has_learning_rate();
  inline void clear_has_learning_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float learning_rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static AggGradLearnerArg* default_instance_;
};
// -------------------------------------------------------------------

class PenaltyConfig : public ::google::protobuf::Message {
 public:
  PenaltyConfig();
  virtual ~PenaltyConfig();

  PenaltyConfig(const PenaltyConfig& from);

  inline PenaltyConfig& operator=(const PenaltyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PenaltyConfig& default_instance();

  void Swap(PenaltyConfig* other);

  // implements Message ----------------------------------------------

  PenaltyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PenaltyConfig& from);
  void MergeFrom(const PenaltyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef PenaltyConfig_Type Type;
  static const Type L1 = PenaltyConfig_Type_L1;
  static const Type L2 = PenaltyConfig_Type_L2;
  static inline bool Type_IsValid(int value) {
    return PenaltyConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    PenaltyConfig_Type_Type_MIN;
  static const Type Type_MAX =
    PenaltyConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    PenaltyConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return PenaltyConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return PenaltyConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return PenaltyConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .PenaltyConfig.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::PenaltyConfig_Type type() const;
  inline void set_type(::PenaltyConfig_Type value);

  // required float coefficient = 2 [default = 0];
  inline bool has_coefficient() const;
  inline void clear_coefficient();
  static const int kCoefficientFieldNumber = 2;
  inline float coefficient() const;
  inline void set_coefficient(float value);

  // @@protoc_insertion_point(class_scope:PenaltyConfig)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_coefficient();
  inline void clear_has_coefficient();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  float coefficient_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fconfig_2eproto();
  friend void protobuf_AssignDesc_proto_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_proto_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static PenaltyConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// AppConfig

// optional .AppConfig.AppType type = 1;
inline bool AppConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::AppConfig_AppType AppConfig::type() const {
  return static_cast< ::AppConfig_AppType >(type_);
}
inline void AppConfig::set_type(::AppConfig_AppType value) {
  assert(::AppConfig_AppType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string app_name = 2;
inline bool AppConfig::has_app_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppConfig::set_has_app_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppConfig::clear_has_app_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppConfig::clear_app_name() {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    app_name_->clear();
  }
  clear_has_app_name();
}
inline const ::std::string& AppConfig::app_name() const {
  return *app_name_;
}
inline void AppConfig::set_app_name(const ::std::string& value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void AppConfig::set_app_name(const char* value) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(value);
}
inline void AppConfig::set_app_name(const char* value, size_t size) {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  app_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppConfig::mutable_app_name() {
  set_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    app_name_ = new ::std::string;
  }
  return app_name_;
}
inline ::std::string* AppConfig::release_app_name() {
  clear_has_app_name();
  if (app_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = app_name_;
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AppConfig::set_allocated_app_name(::std::string* app_name) {
  if (app_name_ != &::google::protobuf::internal::kEmptyString) {
    delete app_name_;
  }
  if (app_name) {
    set_has_app_name();
    app_name_ = app_name;
  } else {
    clear_has_app_name();
    app_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string parameter_name = 3;
inline int AppConfig::parameter_name_size() const {
  return parameter_name_.size();
}
inline void AppConfig::clear_parameter_name() {
  parameter_name_.Clear();
}
inline const ::std::string& AppConfig::parameter_name(int index) const {
  return parameter_name_.Get(index);
}
inline ::std::string* AppConfig::mutable_parameter_name(int index) {
  return parameter_name_.Mutable(index);
}
inline void AppConfig::set_parameter_name(int index, const ::std::string& value) {
  parameter_name_.Mutable(index)->assign(value);
}
inline void AppConfig::set_parameter_name(int index, const char* value) {
  parameter_name_.Mutable(index)->assign(value);
}
inline void AppConfig::set_parameter_name(int index, const char* value, size_t size) {
  parameter_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppConfig::add_parameter_name() {
  return parameter_name_.Add();
}
inline void AppConfig::add_parameter_name(const ::std::string& value) {
  parameter_name_.Add()->assign(value);
}
inline void AppConfig::add_parameter_name(const char* value) {
  parameter_name_.Add()->assign(value);
}
inline void AppConfig::add_parameter_name(const char* value, size_t size) {
  parameter_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppConfig::parameter_name() const {
  return parameter_name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppConfig::mutable_parameter_name() {
  return &parameter_name_;
}

// optional .DataConfig training = 10;
inline bool AppConfig::has_training() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppConfig::set_has_training() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppConfig::clear_has_training() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppConfig::clear_training() {
  if (training_ != NULL) training_->::DataConfig::Clear();
  clear_has_training();
}
inline const ::DataConfig& AppConfig::training() const {
  return training_ != NULL ? *training_ : *default_instance_->training_;
}
inline ::DataConfig* AppConfig::mutable_training() {
  set_has_training();
  if (training_ == NULL) training_ = new ::DataConfig;
  return training_;
}
inline ::DataConfig* AppConfig::release_training() {
  clear_has_training();
  ::DataConfig* temp = training_;
  training_ = NULL;
  return temp;
}
inline void AppConfig::set_allocated_training(::DataConfig* training) {
  delete training_;
  training_ = training;
  if (training) {
    set_has_training();
  } else {
    clear_has_training();
  }
}

// optional .LossConfig loss = 20;
inline bool AppConfig::has_loss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppConfig::set_has_loss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppConfig::clear_has_loss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppConfig::clear_loss() {
  if (loss_ != NULL) loss_->::LossConfig::Clear();
  clear_has_loss();
}
inline const ::LossConfig& AppConfig::loss() const {
  return loss_ != NULL ? *loss_ : *default_instance_->loss_;
}
inline ::LossConfig* AppConfig::mutable_loss() {
  set_has_loss();
  if (loss_ == NULL) loss_ = new ::LossConfig;
  return loss_;
}
inline ::LossConfig* AppConfig::release_loss() {
  clear_has_loss();
  ::LossConfig* temp = loss_;
  loss_ = NULL;
  return temp;
}
inline void AppConfig::set_allocated_loss(::LossConfig* loss) {
  delete loss_;
  loss_ = loss;
  if (loss) {
    set_has_loss();
  } else {
    clear_has_loss();
  }
}

// optional .PenaltyConfig penalty = 21;
inline bool AppConfig::has_penalty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppConfig::set_has_penalty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppConfig::clear_has_penalty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppConfig::clear_penalty() {
  if (penalty_ != NULL) penalty_->::PenaltyConfig::Clear();
  clear_has_penalty();
}
inline const ::PenaltyConfig& AppConfig::penalty() const {
  return penalty_ != NULL ? *penalty_ : *default_instance_->penalty_;
}
inline ::PenaltyConfig* AppConfig::mutable_penalty() {
  set_has_penalty();
  if (penalty_ == NULL) penalty_ = new ::PenaltyConfig;
  return penalty_;
}
inline ::PenaltyConfig* AppConfig::release_penalty() {
  clear_has_penalty();
  ::PenaltyConfig* temp = penalty_;
  penalty_ = NULL;
  return temp;
}
inline void AppConfig::set_allocated_penalty(::PenaltyConfig* penalty) {
  delete penalty_;
  penalty_ = penalty;
  if (penalty) {
    set_has_penalty();
  } else {
    clear_has_penalty();
  }
}

// optional .LearnerConfig learner = 30;
inline bool AppConfig::has_learner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppConfig::set_has_learner() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppConfig::clear_has_learner() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppConfig::clear_learner() {
  if (learner_ != NULL) learner_->::LearnerConfig::Clear();
  clear_has_learner();
}
inline const ::LearnerConfig& AppConfig::learner() const {
  return learner_ != NULL ? *learner_ : *default_instance_->learner_;
}
inline ::LearnerConfig* AppConfig::mutable_learner() {
  set_has_learner();
  if (learner_ == NULL) learner_ = new ::LearnerConfig;
  return learner_;
}
inline ::LearnerConfig* AppConfig::release_learner() {
  clear_has_learner();
  ::LearnerConfig* temp = learner_;
  learner_ = NULL;
  return temp;
}
inline void AppConfig::set_allocated_learner(::LearnerConfig* learner) {
  delete learner_;
  learner_ = learner;
  if (learner) {
    set_has_learner();
  } else {
    clear_has_learner();
  }
}

// optional .BlockIteratorConfig block_iterator = 40;
inline bool AppConfig::has_block_iterator() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppConfig::set_has_block_iterator() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppConfig::clear_has_block_iterator() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppConfig::clear_block_iterator() {
  if (block_iterator_ != NULL) block_iterator_->::BlockIteratorConfig::Clear();
  clear_has_block_iterator();
}
inline const ::BlockIteratorConfig& AppConfig::block_iterator() const {
  return block_iterator_ != NULL ? *block_iterator_ : *default_instance_->block_iterator_;
}
inline ::BlockIteratorConfig* AppConfig::mutable_block_iterator() {
  set_has_block_iterator();
  if (block_iterator_ == NULL) block_iterator_ = new ::BlockIteratorConfig;
  return block_iterator_;
}
inline ::BlockIteratorConfig* AppConfig::release_block_iterator() {
  clear_has_block_iterator();
  ::BlockIteratorConfig* temp = block_iterator_;
  block_iterator_ = NULL;
  return temp;
}
inline void AppConfig::set_allocated_block_iterator(::BlockIteratorConfig* block_iterator) {
  delete block_iterator_;
  block_iterator_ = block_iterator;
  if (block_iterator) {
    set_has_block_iterator();
  } else {
    clear_has_block_iterator();
  }
}

// -------------------------------------------------------------------

// DataConfig

// required .DataConfig.DataFormat format = 1;
inline bool DataConfig::has_format() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataConfig::set_has_format() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataConfig::clear_has_format() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataConfig::clear_format() {
  format_ = 1;
  clear_has_format();
}
inline ::DataConfig_DataFormat DataConfig::format() const {
  return static_cast< ::DataConfig_DataFormat >(format_);
}
inline void DataConfig::set_format(::DataConfig_DataFormat value) {
  assert(::DataConfig_DataFormat_IsValid(value));
  set_has_format();
  format_ = value;
}

// repeated string files = 2;
inline int DataConfig::files_size() const {
  return files_.size();
}
inline void DataConfig::clear_files() {
  files_.Clear();
}
inline const ::std::string& DataConfig::files(int index) const {
  return files_.Get(index);
}
inline ::std::string* DataConfig::mutable_files(int index) {
  return files_.Mutable(index);
}
inline void DataConfig::set_files(int index, const ::std::string& value) {
  files_.Mutable(index)->assign(value);
}
inline void DataConfig::set_files(int index, const char* value) {
  files_.Mutable(index)->assign(value);
}
inline void DataConfig::set_files(int index, const char* value, size_t size) {
  files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DataConfig::add_files() {
  return files_.Add();
}
inline void DataConfig::add_files(const ::std::string& value) {
  files_.Add()->assign(value);
}
inline void DataConfig::add_files(const char* value) {
  files_.Add()->assign(value);
}
inline void DataConfig::add_files(const char* value, size_t size) {
  files_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DataConfig::files() const {
  return files_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DataConfig::mutable_files() {
  return &files_;
}

// optional .PbRange range = 3;
inline bool DataConfig::has_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataConfig::set_has_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataConfig::clear_has_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataConfig::clear_range() {
  if (range_ != NULL) range_->::PbRange::Clear();
  clear_has_range();
}
inline const ::PbRange& DataConfig::range() const {
  return range_ != NULL ? *range_ : *default_instance_->range_;
}
inline ::PbRange* DataConfig::mutable_range() {
  set_has_range();
  if (range_ == NULL) range_ = new ::PbRange;
  return range_;
}
inline ::PbRange* DataConfig::release_range() {
  clear_has_range();
  ::PbRange* temp = range_;
  range_ = NULL;
  return temp;
}
inline void DataConfig::set_allocated_range(::PbRange* range) {
  delete range_;
  range_ = range;
  if (range) {
    set_has_range();
  } else {
    clear_has_range();
  }
}

// -------------------------------------------------------------------

// BlockIteratorConfig

// required int64 example_block_size = 1 [default = -1];
inline bool BlockIteratorConfig::has_example_block_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockIteratorConfig::set_has_example_block_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockIteratorConfig::clear_has_example_block_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockIteratorConfig::clear_example_block_size() {
  example_block_size_ = GOOGLE_LONGLONG(-1);
  clear_has_example_block_size();
}
inline ::google::protobuf::int64 BlockIteratorConfig::example_block_size() const {
  return example_block_size_;
}
inline void BlockIteratorConfig::set_example_block_size(::google::protobuf::int64 value) {
  set_has_example_block_size();
  example_block_size_ = value;
}

// required float feature_block_ratio = 2 [default = 0];
inline bool BlockIteratorConfig::has_feature_block_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockIteratorConfig::set_has_feature_block_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockIteratorConfig::clear_has_feature_block_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockIteratorConfig::clear_feature_block_ratio() {
  feature_block_ratio_ = 0;
  clear_has_feature_block_ratio();
}
inline float BlockIteratorConfig::feature_block_ratio() const {
  return feature_block_ratio_;
}
inline void BlockIteratorConfig::set_feature_block_ratio(float value) {
  set_has_feature_block_ratio();
  feature_block_ratio_ = value;
}

// required int32 max_pass_of_data = 3 [default = 2];
inline bool BlockIteratorConfig::has_max_pass_of_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BlockIteratorConfig::set_has_max_pass_of_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BlockIteratorConfig::clear_has_max_pass_of_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BlockIteratorConfig::clear_max_pass_of_data() {
  max_pass_of_data_ = 2;
  clear_has_max_pass_of_data();
}
inline ::google::protobuf::int32 BlockIteratorConfig::max_pass_of_data() const {
  return max_pass_of_data_;
}
inline void BlockIteratorConfig::set_max_pass_of_data(::google::protobuf::int32 value) {
  set_has_max_pass_of_data();
  max_pass_of_data_ = value;
}

// required int32 max_block_delay = 4 [default = 0];
inline bool BlockIteratorConfig::has_max_block_delay() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BlockIteratorConfig::set_has_max_block_delay() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BlockIteratorConfig::clear_has_max_block_delay() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BlockIteratorConfig::clear_max_block_delay() {
  max_block_delay_ = 0;
  clear_has_max_block_delay();
}
inline ::google::protobuf::int32 BlockIteratorConfig::max_block_delay() const {
  return max_block_delay_;
}
inline void BlockIteratorConfig::set_max_block_delay(::google::protobuf::int32 value) {
  set_has_max_block_delay();
  max_block_delay_ = value;
}

// -------------------------------------------------------------------

// LossConfig

// required .LossConfig.Type type = 1;
inline bool LossConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LossConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LossConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LossConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::LossConfig_Type LossConfig::type() const {
  return static_cast< ::LossConfig_Type >(type_);
}
inline void LossConfig::set_type(::LossConfig_Type value) {
  assert(::LossConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LearnerConfig

// required .LearnerConfig.Type type = 1;
inline bool LearnerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LearnerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LearnerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LearnerConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::LearnerConfig_Type LearnerConfig::type() const {
  return static_cast< ::LearnerConfig_Type >(type_);
}
inline void LearnerConfig::set_type(::LearnerConfig_Type value) {
  assert(::LearnerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional float learning_rate = 2 [default = 1];
inline bool LearnerConfig::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LearnerConfig::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LearnerConfig::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LearnerConfig::clear_learning_rate() {
  learning_rate_ = 1;
  clear_has_learning_rate();
}
inline float LearnerConfig::learning_rate() const {
  return learning_rate_;
}
inline void LearnerConfig::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
}

// -------------------------------------------------------------------

// AggGradLearnerArg

// optional float learning_rate = 1 [default = 1];
inline bool AggGradLearnerArg::has_learning_rate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AggGradLearnerArg::set_has_learning_rate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AggGradLearnerArg::clear_has_learning_rate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AggGradLearnerArg::clear_learning_rate() {
  learning_rate_ = 1;
  clear_has_learning_rate();
}
inline float AggGradLearnerArg::learning_rate() const {
  return learning_rate_;
}
inline void AggGradLearnerArg::set_learning_rate(float value) {
  set_has_learning_rate();
  learning_rate_ = value;
}

// -------------------------------------------------------------------

// PenaltyConfig

// required .PenaltyConfig.Type type = 1;
inline bool PenaltyConfig::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PenaltyConfig::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PenaltyConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PenaltyConfig::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PenaltyConfig_Type PenaltyConfig::type() const {
  return static_cast< ::PenaltyConfig_Type >(type_);
}
inline void PenaltyConfig::set_type(::PenaltyConfig_Type value) {
  assert(::PenaltyConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// required float coefficient = 2 [default = 0];
inline bool PenaltyConfig::has_coefficient() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PenaltyConfig::set_has_coefficient() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PenaltyConfig::clear_has_coefficient() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PenaltyConfig::clear_coefficient() {
  coefficient_ = 0;
  clear_has_coefficient();
}
inline float PenaltyConfig::coefficient() const {
  return coefficient_;
}
inline void PenaltyConfig::set_coefficient(float value) {
  set_has_coefficient();
  coefficient_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AppConfig_AppType>() {
  return ::AppConfig_AppType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DataConfig_DataFormat>() {
  return ::DataConfig_DataFormat_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LossConfig_Type>() {
  return ::LossConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LearnerConfig_Type>() {
  return ::LearnerConfig_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PenaltyConfig_Type>() {
  return ::PenaltyConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fconfig_2eproto__INCLUDED
