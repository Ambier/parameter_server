// data, objective function, and optimizaiton method
import "proto/loss.proto";
import "proto/penalty.proto";
import "proto/learner.proto";
import "proto/range.proto";

// import "proto/block_solver.proto"
// import "proto/risk_minimization.proto"

message AppConfig {
  enum Type {
    RISK_MINIMIZATION = 1;
    SKETCH = 2;
  }
  optional Type type = 1;
  optional string app_name = 2;
  repeated string parameter_name = 3;

  optional DataConfig training = 10;

  optional LossConfig loss = 20;
  optional PenaltyConfig penalty = 21;

  optional LearnerConfig learner = 30;

  optional BlockIteratorConfig block_iterator = 40;


  // optional GradDescConfig grad_desc = 21;
  // optional BlockProxGradConfig block_prox_grad = 22;
  // optional SketchConfig sketch = 31;
}

message DataConfig {
  enum Format {
    BIN = 1;
    PROTO = 2;
  }
  required Format format = 1;
  repeated string files = 2;
  optional PbRange range = 3;  // valid for bin format
}


message BlockIteratorConfig {
  // the number of example in a block. It is the minibatch size for
  // minibatch-sgd. If <= 0, then use the whole data
  required int64 example_block_size = 1 [default = -1];

  // divide a feature group into feature_block_ratio x nnz_feature_per_instance
  // blocks. If = 0, then use all features
  required float feature_block_ratio = 2 [default = 0];

  required int32 max_pass_of_data = 3 [default = 2];
  // bounded-delay consistency
  required int32 max_block_delay = 4 [default = 0];
}


// // for gradient descent
// message GradDescConfig {
//   optional string job_name = 1 [default = "GD"];
//   optional string weight_name = 2 [default = "GD_weight"];

//   required double eta = 3 [default = 1];
//   required int32 max_iter = 21 [default = 2];
// }

// message BlockProxGradConfig {
//   optional string job_name = 1 [default = "BPG"];
//   optional string weight_name = 2 [default = "BPG_weight"];

//   required double lambda = 3 [default = 1];

//   required double eta = 11 [default = 1];
//   required int32 num_block = 12 [default = 5];
//   required int32 max_delay = 13 [default = 0];

//   required int32 max_iter = 21 [default = 2];
//   required double stop_eps = 22 [default = 1e-5];
// }

// message SketchConfig {
//   optional string job_name = 1 [default = "SKETCH"];
//   optional string weight_name = 2 [default = "SKETCH_matrix"];

//   optional uint32 hash_seed = 3 [default = 5]; // seed for computing client side hash
//   optional uint32 iter_entries = 4 [default = 1000]; // number of entries to process at each time
//   optional uint32 max_delay = 5 [default = 0];
//   optional uint32 n_repeat = 6 [default = 1];

//   optional CountminConfig countmin = 51;
// }

// message CountminConfig {
//   optional uint32 num_hash = 1   [default = 4]; //number of hash functions to use
//   optional uint32 table_size = 2 [default = 1048576]; // sizeof each row
//   //optional uint32 key_size = 3   [default = 8];

//   repeated uint32 seed = 51;
// }


// message WorkloadInfo {
//   optional double time = 1;
//   optional uint32 payload = 2;
//   optional uint32 key = 3;
// }
// message ServerWorkloadInfo {
//   optional string server_id = 1;
//   repeated WorkloadInfo workload = 2;
// }
// message CountminProgress {

//   optional string client_id = 11;
//   optional double decompose_time = 12;
//   repeated ServerWorkloadInfo server_workload = 13;
// }
