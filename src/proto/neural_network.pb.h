// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/neural_network.proto

#ifndef PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED
#define PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

class LayerConfig;
class NetConfig;

enum LayerConfig_Type {
  LayerConfig_Type_NONE = 0
};
bool LayerConfig_Type_IsValid(int value);
const LayerConfig_Type LayerConfig_Type_Type_MIN = LayerConfig_Type_NONE;
const LayerConfig_Type LayerConfig_Type_Type_MAX = LayerConfig_Type_NONE;
const int LayerConfig_Type_Type_ARRAYSIZE = LayerConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* LayerConfig_Type_descriptor();
inline const ::std::string& LayerConfig_Type_Name(LayerConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    LayerConfig_Type_descriptor(), value);
}
inline bool LayerConfig_Type_Parse(
    const ::std::string& name, LayerConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LayerConfig_Type>(
    LayerConfig_Type_descriptor(), name, value);
}
// ===================================================================

class LayerConfig : public ::google::protobuf::Message {
 public:
  LayerConfig();
  virtual ~LayerConfig();

  LayerConfig(const LayerConfig& from);

  inline LayerConfig& operator=(const LayerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayerConfig& default_instance();

  void Swap(LayerConfig* other);

  // implements Message ----------------------------------------------

  LayerConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayerConfig& from);
  void MergeFrom(const LayerConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef LayerConfig_Type Type;
  static const Type NONE = LayerConfig_Type_NONE;
  static inline bool Type_IsValid(int value) {
    return LayerConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    LayerConfig_Type_Type_MIN;
  static const Type Type_MAX =
    LayerConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    LayerConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return LayerConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return LayerConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return LayerConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string bottom = 1;
  inline int bottom_size() const;
  inline void clear_bottom();
  static const int kBottomFieldNumber = 1;
  inline const ::std::string& bottom(int index) const;
  inline ::std::string* mutable_bottom(int index);
  inline void set_bottom(int index, const ::std::string& value);
  inline void set_bottom(int index, const char* value);
  inline void set_bottom(int index, const char* value, size_t size);
  inline ::std::string* add_bottom();
  inline void add_bottom(const ::std::string& value);
  inline void add_bottom(const char* value);
  inline void add_bottom(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& bottom() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_bottom();

  // repeated string top = 2;
  inline int top_size() const;
  inline void clear_top();
  static const int kTopFieldNumber = 2;
  inline const ::std::string& top(int index) const;
  inline ::std::string* mutable_top(int index);
  inline void set_top(int index, const ::std::string& value);
  inline void set_top(int index, const char* value);
  inline void set_top(int index, const char* value, size_t size);
  inline ::std::string* add_top();
  inline void add_top(const ::std::string& value);
  inline void add_top(const char* value);
  inline void add_top(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& top() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top();

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .PS.LayerConfig.Type type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::PS::LayerConfig_Type type() const;
  inline void set_type(::PS::LayerConfig_Type value);

  // @@protoc_insertion_point(class_scope:PS.LayerConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> bottom_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_;
  ::std::string* name_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static LayerConfig* default_instance_;
};
// -------------------------------------------------------------------

class NetConfig : public ::google::protobuf::Message {
 public:
  NetConfig();
  virtual ~NetConfig();

  NetConfig(const NetConfig& from);

  inline NetConfig& operator=(const NetConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetConfig& default_instance();

  void Swap(NetConfig* other);

  // implements Message ----------------------------------------------

  NetConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetConfig& from);
  void MergeFrom(const NetConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .PS.LayerConfig layers = 2;
  inline int layers_size() const;
  inline void clear_layers();
  static const int kLayersFieldNumber = 2;
  inline const ::PS::LayerConfig& layers(int index) const;
  inline ::PS::LayerConfig* mutable_layers(int index);
  inline ::PS::LayerConfig* add_layers();
  inline const ::google::protobuf::RepeatedPtrField< ::PS::LayerConfig >&
      layers() const;
  inline ::google::protobuf::RepeatedPtrField< ::PS::LayerConfig >*
      mutable_layers();

  // @@protoc_insertion_point(class_scope:PS.NetConfig)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::PS::LayerConfig > layers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_AssignDesc_proto_2fneural_5fnetwork_2eproto();
  friend void protobuf_ShutdownFile_proto_2fneural_5fnetwork_2eproto();

  void InitAsDefaultInstance();
  static NetConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// LayerConfig

// repeated string bottom = 1;
inline int LayerConfig::bottom_size() const {
  return bottom_.size();
}
inline void LayerConfig::clear_bottom() {
  bottom_.Clear();
}
inline const ::std::string& LayerConfig::bottom(int index) const {
  return bottom_.Get(index);
}
inline ::std::string* LayerConfig::mutable_bottom(int index) {
  return bottom_.Mutable(index);
}
inline void LayerConfig::set_bottom(int index, const ::std::string& value) {
  bottom_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_bottom(int index, const char* value) {
  bottom_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_bottom(int index, const char* value, size_t size) {
  bottom_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::add_bottom() {
  return bottom_.Add();
}
inline void LayerConfig::add_bottom(const ::std::string& value) {
  bottom_.Add()->assign(value);
}
inline void LayerConfig::add_bottom(const char* value) {
  bottom_.Add()->assign(value);
}
inline void LayerConfig::add_bottom(const char* value, size_t size) {
  bottom_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerConfig::bottom() const {
  return bottom_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerConfig::mutable_bottom() {
  return &bottom_;
}

// repeated string top = 2;
inline int LayerConfig::top_size() const {
  return top_.size();
}
inline void LayerConfig::clear_top() {
  top_.Clear();
}
inline const ::std::string& LayerConfig::top(int index) const {
  return top_.Get(index);
}
inline ::std::string* LayerConfig::mutable_top(int index) {
  return top_.Mutable(index);
}
inline void LayerConfig::set_top(int index, const ::std::string& value) {
  top_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_top(int index, const char* value) {
  top_.Mutable(index)->assign(value);
}
inline void LayerConfig::set_top(int index, const char* value, size_t size) {
  top_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::add_top() {
  return top_.Add();
}
inline void LayerConfig::add_top(const ::std::string& value) {
  top_.Add()->assign(value);
}
inline void LayerConfig::add_top(const char* value) {
  top_.Add()->assign(value);
}
inline void LayerConfig::add_top(const char* value, size_t size) {
  top_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LayerConfig::top() const {
  return top_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LayerConfig::mutable_top() {
  return &top_;
}

// required string name = 3;
inline bool LayerConfig::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayerConfig::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayerConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayerConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LayerConfig::name() const {
  return *name_;
}
inline void LayerConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LayerConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LayerConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LayerConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LayerConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .PS.LayerConfig.Type type = 4;
inline bool LayerConfig::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayerConfig::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayerConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayerConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PS::LayerConfig_Type LayerConfig::type() const {
  return static_cast< ::PS::LayerConfig_Type >(type_);
}
inline void LayerConfig::set_type(::PS::LayerConfig_Type value) {
  assert(::PS::LayerConfig_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NetConfig

// optional string name = 1;
inline bool NetConfig::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NetConfig::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NetConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NetConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NetConfig::name() const {
  return *name_;
}
inline void NetConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NetConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NetConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NetConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PS.LayerConfig layers = 2;
inline int NetConfig::layers_size() const {
  return layers_.size();
}
inline void NetConfig::clear_layers() {
  layers_.Clear();
}
inline const ::PS::LayerConfig& NetConfig::layers(int index) const {
  return layers_.Get(index);
}
inline ::PS::LayerConfig* NetConfig::mutable_layers(int index) {
  return layers_.Mutable(index);
}
inline ::PS::LayerConfig* NetConfig::add_layers() {
  return layers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PS::LayerConfig >&
NetConfig::layers() const {
  return layers_;
}
inline ::google::protobuf::RepeatedPtrField< ::PS::LayerConfig >*
NetConfig::mutable_layers() {
  return &layers_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PS::LayerConfig_Type>() {
  return ::PS::LayerConfig_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fneural_5fnetwork_2eproto__INCLUDED
